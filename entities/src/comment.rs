//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use super::prelude::*;
use chrono::NaiveDate;
use sea_orm::entity::prelude::*;
// use sea_orm::Column;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "user_id")]
    pub user_id: i32,
    #[sea_orm(column_name = "video_id")]
    pub video_id: i32,
    pub texte: String,
    pub date: NaiveDate,
}

/*   belongs_to = "super::user::Entity",
from = "Column:user_id",
to = "super::user::Column::Id" */

// #[derive(Copy, Clone, Debug, EnumIter)]
// pub enum Relation {
//     #[sea_orm(belongs_to = "super::user::Entity", from = "Column::User_id" to = "super::user::Column::Id" )]
//     User,
//     #[sea_orm(belongs_to = "super::video::Entity", from = "Column::User_id" to = "super::user::Column:Id")]
//     Video,
// }

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    User,
    Video,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::User => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::Id)
                .into(),

            Self::Video => Entity::belongs_to(super::user::Entity)
                .from(Column::UserId)
                .to(super::user::Column::Id)
                .into(),
        }
    }
}

impl Related<super::user::Entity> for Comment {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::video::Entity> for Comment {
    fn to() -> RelationDef {
        Relation::Video.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
